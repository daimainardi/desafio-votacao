plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id "org.sonarqube" version "6.1.0.5360"

}

group = 'com.daimainardi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'jakarta.validation:jakarta.validation-api:3.1.0-M1'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2:2.3.232'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.jacoco:org.jacoco.agent:0.8.12'

}
tasks.named('test') {
	useJUnitPlatform()
}
test {
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/xml/report.xml")
		html.required = true
	}
}
sonar {
	properties {
		property "sonar.projectKey", "desafio-votacao"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_3a733d77ea0347cea3a0e36cc290a48a565cc186"
		property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/xml/report.xml").get().asFile.absolutePath
	}
}